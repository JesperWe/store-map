import React, { useEffect, useState } from 'react'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { fabric } from 'fabric'
import {
	Button,
	Flex,
	HStack,
	Modal,
	ModalBody,
	ModalCloseButton,
	ModalContent,
	ModalFooter,
	ModalHeader,
	ModalOverlay,
	Select
} from "@chakra-ui/react"

let canvas

const departments = [
	{
		key: 'fotball',
		name: 'Fotball',
		color: '#ff6400'
	},
	{
		key: 'bikes',
		name: 'Bikes',
		color: '#ffca00'
	},
	{
		key: 'weapons',
		name: 'Weapons',
		color: '#cbfa00'
	},
	{
		key: 'pickup',
		name: 'Pickup@Store',
		color: '#02fa7d'
	},
	{
		key: 'cust-serv',
		name: 'Customer Service',
		color: '#02c6fa'
	},
]

export default function Home() {

	const [ target, set_target ] = useState()
	const [ category, set_category ] = useState()
	const [ isOpen, set_isOpen ] = useState( false )

	const addRect = c => {
		const dept = departments.find( d => d.key === category )

		const rect = new fabric.Rect( {
			height: 280,
			width: 200,
			opacity: 0.5,
			fill: dept.color
		} )
		const text = new fabric.Text( dept.name, {
			fontSize: 30,
			originX: 'center',
			originY: 'center',
			top: 140,
			left: 100
		} )
		const group = new fabric.Group( [ rect, text ], {
			left: 150,
			top: 100
		} )
		c.add( group )
		c.renderAll()
		console.log( c.toJSON() )
	}

	useEffect( () => {
		const el = document.getElementById( "canvas-wrap" )

		canvas = new fabric.Canvas( 'canvas', {
			backgroundColor: '#ffffff',
			width: el.offsetWidth,
			height: el.offsetHeight
		} )

		const saved = localStorage.getItem( 'store-map' )
		if( saved ) {
			canvas.loadFromJSON( saved )
		}

		fabric.Image.fromURL( "/kungenskurva.png", img => {
			canvas.setBackgroundImage( img, canvas.renderAll.bind( canvas ), {
				scaleX: canvas.height / img.height,
				scaleY: canvas.height / img.height,
				originX: 'center',
				originY: 'center',
				top: canvas.height / 2,
				left: canvas.width / 2
			} )
		} )
		canvas.on( 'mouse:dblclick', e => {
			set_target( e.target )
			set_isOpen( true )
		} )
		canvas.on( {
			'object:scaling': obj => {
				const text = obj.target.item( 1 ),
					group = obj.target,
					scaleX = group.width / ( group.width * group.scaleX ),
					scaleY = group.height / ( group.height * group.scaleY )
				text.set( 'scaleX', scaleX )
				text.set( 'scaleY', scaleY )
			}
		} )
	}, [] )

	return (
		<div className={ styles.container }>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app"/>
				<link rel="icon" href="/favicon.ico"/>
			</Head>

			<Flex align="center">
				<div style={ { marginTop: 20, marginBottom: 10 } }>
					<HStack width={ 400 } style={ { margin: '0 auto' } }>
						<Select
							placeholder="Select department"
							onChange={ e => set_category( e.target.value ) }
						>
							{ departments.map( d => ( <option key={ d.key } value={ d.key }>{ d.name }</option> ) ) }
						</Select>

						<Button onClick={ () => addRect( canvas ) } disabled={ !category }>
							Add Area
						</Button>
						<Button
							onClick={ () => {
								localStorage.setItem( 'store-map', JSON.stringify( canvas ) )
							} }
						>
							Save
						</Button>
					</HStack>
					<div id="canvas-wrap" style={ { width: "100vw", height: "calc( 100vh - 70px )" } }>
						<canvas style={ { marginTop: 12 } } id="canvas"/>
					</div>
				</div>
			</Flex>

			<Modal isOpen={ isOpen } onClose={ () => set_isOpen( false ) }>
				<ModalOverlay/>
				<ModalContent>
					<ModalHeader>Store area info</ModalHeader>
					<ModalCloseButton/>
					<ModalBody>
						<Select
							placeholder="Select department"
							onChange={ e => {
								const dept = departments.find( d => d.key === e.target.value )
								target.item( 1 )?.set( 'text', dept.name )
								target.item( 0 )?.set( 'backgroundColor', dept.color )
								canvas.renderAll()
							} }
						>
							{ departments.map( d => ( <option key={ d.key } value={ d.key }>{ d.name }</option> ) ) }
						</Select>
					</ModalBody>

					<ModalFooter>
						<Button colorScheme="blue" mr={ 3 } onClick={ () => set_isOpen( false ) }>
							Close
						</Button>
					</ModalFooter>
				</ModalContent>
			</Modal>

		</div>
	)
}
